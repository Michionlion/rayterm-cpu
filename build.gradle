plugins {
    id 'cpp'
    id 'google-test-test-suite'
    id 'org.ajoberstar.grgit' version '3.0.0'
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            googleTest {
                headers.srcDirs "${google_test}/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() + "/${google_test}/build/libgtest.a")
                }
            }
            eigen {
                headers.srcDirs "${eigen_path}"
            }
            libigl {
                headers.srcDirs "${libigl_path}/include"
                //binaries.withType(StaticLibraryBinary) {
                //    staticLibraryFile = file(projectDir.getPath() + "/${libigl_path}/build/libigl.a")
                //}
            }
        }
    }
    components {
        raymath(NativeLibrarySpec) {
            sources.cpp.lib library: 'eigen', linkage: 'api'
            sources.cpp.lib library: 'libigl', linkage: 'api'
        }
        raytrace(NativeLibrarySpec) {
            sources.cpp.lib library: 'raymath', linkage: link_type
            sources.cpp.lib library: 'eigen', linkage: 'api'
            sources.cpp.lib library: 'libigl', linkage: 'api'
        }
        rayterm(NativeLibrarySpec) {
            sources.cpp.lib library: 'raytrace', linkage: link_type
            sources.cpp.lib library: 'eigen', linkage: 'api'
            sources.cpp.lib library: 'libigl', linkage: 'api'
        }
        rtexplore(NativeExecutableSpec) {
            sources.cpp.lib library: "rayterm", linkage: link_type
            sources.cpp.lib library: 'eigen', linkage: 'api'
            sources.cpp.lib library: 'libigl', linkage: 'api'
        }
    }
    testSuites {
        raymathTest(GoogleTestTestSuiteSpec) {
            testing $.components.raymath
            sources.cpp.source.srcDir "src/raymath/test"
            sources.cpp.lib library: 'eigen', linkage: 'api'
            sources.cpp.lib library: 'libigl', linkage: 'api'
        }
        raytraceTest(GoogleTestTestSuiteSpec) {
            testing $.components.raytrace
            sources.cpp.source.srcDir "src/raytrace/test"
            sources.cpp.lib library: 'raymath', linkage: link_type
        }
        raytermTest(GoogleTestTestSuiteSpec) {
            testing $.components.rayterm
            sources.cpp.source.srcDir "src/rayterm/test"
            sources.cpp.lib library: 'raytrace', linkage: link_type
        }
    }
    binaries {
        all {
            linker.args "-lncurses"
            cppCompiler.args "-std=c++11", "-msse4", "-fPIC", "-Wall"
            if (buildType == buildTypes.debug) {
                cppCompiler.args "-g"
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"
            // assumes linux
            cppCompiler.args '-pthread'
            linker.args '-pthread'
        }
    }
    buildTypes {
        debug
        release
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
}

task buildGoogleTest(type: Exec) {
    dependsOn 'pullDeps'
    shouldRunAfter 'pullDeps'
    def gtest = "${projectDir.getPath()}/${google_test}"
    doFirst { exec { commandLine "mkdir", "${gtest}/build" } }
    doFirst { exec { commandLine "rm", "-rf", "${gtest}/build" } }
    commandLine "g++", "-std=c++11", "-isystem", "${gtest}/include", "-I${gtest}", "-pthread", "-c", "${gtest}/src/gtest-all.cc", "-o", "${gtest}/build/gtest-all.o"
    doLast {
        exec {
            commandLine "ar", "-rv", "${gtest}/build/libgtest.a", "${gtest}/build/gtest-all.o"
        }
    }
}

task buildEigen(type: Exec) {
    dependsOn 'pullDeps'
    shouldRunAfter 'pullDeps'
    //def f_eigen = "${projectDir.getPath()}/${eigen_path}"

    //doFirst { exec {
    //    workingDir "${f_eigen}"
    //    commandLine "cmake", ".", "-B", "build", "-DINCLUDE_INSTALL_DIR=include", "-DCMAKE_INSTALL_PREFIX=/card/projects/rayterm/lib/eigen"
    //} }
    //doFirst { exec { commandLine "mkdir", "${f_eigen}/build" } }
    //doFirst { exec { commandLine "rm", "-rf", "${f_eigen}/build" } }


    //workingDir "${f_eigen}/build"
    //commandLine "make", "install"
    commandLine 'echo', 'Updated Eigen headers'
}

task buildIGL(type: Exec) {
    dependsOn 'pullDeps'
    shouldRunAfter 'pullDeps'
    commandLine 'echo', 'Updated libIGL headers'
}

task pullDeps(type: Exec) {
    doFirst { println 'Updating dependencies' }
    commandLine 'git', 'submodule', 'update', '--init', '--recursive'
}

task deps {
    dependsOn 'pullDeps'
    dependsOn 'buildGoogleTest'
    dependsOn 'buildEigen'
    dependsOn 'buildIGL'
}

task install(type: Copy) {
    dependsOn 'build'
    from 'build/libs/rayterm/shared/release'
    into "${System.getProperty("user.home")}/${install_location}"
}

task test {
    dependsOn "clean"
}

tasks.withType(RunTestExecutable) { task ->
    args "--gtest_output=xml:test_detail.xml"
    tasks.test.dependsOn task
    // this may mess up other things
    mustRunAfter "clean"
}
