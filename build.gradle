plugins {
    id 'cpp'
    id 'google-test-test-suite'
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            googleTest {
                headers.srcDir new File(projectDir, "${google_test}/include") 
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() + "/${google_test}/build/libgtest.a")
                }
            }
        }
    }
    components {
        rayterm(NativeLibrarySpec)
        rtexplore(NativeExecutableSpec) {
            sources.cpp.lib library: "rayterm", linkage: link_type
        }
    }
    testSuites {
        raytermTest(GoogleTestTestSuiteSpec) {
            testing $.components.rayterm
            sources.cpp.source.srcDir "src/rayterm/test"
        }
    }
    binaries {
        all {
            linker.args "-lncurses"
            cppCompiler.args "-std=c++11", "-Wall"
            if (buildType == buildTypes.debug) {
                cppCompiler.args "-g"
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"
            // assumes linux
            cppCompiler.args '-pthread'
            linker.args '-pthread'
        }
    }
    buildTypes {
        debug
        release
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
}

task buildGoogleTest(type: Exec) {
    def gtest = "${projectDir.getPath()}/${google_test}"
    doFirst { exec { commandLine "mkdir", "${gtest}/build" } }
    doFirst { exec { commandLine "rm", "-r", "${gtest}/build" } }
    commandLine "g++", "-std=c++11", "-isystem", "${gtest}/include", "-I${gtest}", "-pthread", "-c", "${gtest}/src/gtest-all.cc", "-o", "${gtest}/build/gtest-all.o"
    doLast {
        exec {
            commandLine "ar", "-rv", "${gtest}/build/libgtest.a", "${gtest}/build/gtest-all.o"
        }
    }
}

task install(type: Copy) {
    dependsOn 'build'
    from 'build/libs/rayterm/shared/release'
    into "${System.getProperty("user.home")}/${install_location}"
}
